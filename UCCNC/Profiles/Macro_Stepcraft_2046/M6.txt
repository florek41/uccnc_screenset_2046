// Multi Position ATC Macro by Hugo Neil
// Revision 6.3  - Nov-21 - Hugo Neil
string ifai=AS3.Getfield(27242);double move=Convert.ToDouble(ifai);if(move==55){if(!exec.GetLED(56)||!exec.GetLED(57)||!exec.GetLED(58))
{
MessageBox.Show("The machine has not yet been homed, HOME before executing!");
exec.Stop();
return;
}
// (1) STEPCRAFT port definition
int Chuckopenport = 1;
int Chuckopenpin = 14;
double[] ToolX = new double[31];
double[] ToolY = new double[31];
double[] ToolZ = new double[31];
double[] HolderPosition = new double[31];
double[] HolderType = new double[31];
int[] UsedToolRack = new int[31];
double[] ToolRackHeight = new double[5];  
double[] ToolRackType = new double[5];
double[] ToolRackPosition = new double[5];
int WaitRelease = 100;
double Feedrate = 750;
double SafeZ = -2;
int WaitSpin = 1000;
// Get current XY machine coordinates to return to this position at the end of the macro
double Xoriginalpos = exec.GetXmachpos();
double Yoriginalpos = exec.GetYmachpos();
double Zoriginalpos = exec.GetYmachpos();

// ---------------- VALUES TO ADJUST ----------------

double Xtooloffset = 35; //ATC release distance Use  20mm for HF500 ATC  // Use  35mm for MM1000 ATC // Use 50 for in-bed or drop support
double Ytooloffset = 35; //ATC release distance Use  20mm for HF500 ATC  // Use  35mm for MM1000 ATC // Use 50 for in-bed or drop support
double Ztooloffset = 35; //STEPCRAFT tool raise offset for Z (size of the tool cone+5 ) // M1000 measure the heigh with the tool holder and not with the brass tool
double ATCVersion = 0; //  20mm value for HF500  //  35mm for MM1000 / Kress ATC // only use it if you measure with the brass tool
double ATCsafepickup = 2; //  Value to safe pickup of the tool to avoid pressure on the holder 

// (2) STEPCRAFT Tool Rack Information

ToolRackHeight[1] = -10; // Height of the tool rack
ToolRackPosition[1] = 1; //  Rack positions back=1, right=2, front=3, left=4
ToolRackType[1] = 0; // 0 for standard slide support / 1 for in-bed or drop support

ToolRackHeight[2] = -10; // Height of the tool rack
ToolRackPosition[2] = 1; //  Rack positions back=1, right=2, front=3, left=4
ToolRackType[2] = 0; // 0 for standard slide support / 1 for in-bed or drop support

ToolRackHeight[3] = -10; // Height of the tool rack
ToolRackPosition[3] = 1; //  Rack positions back=1, right=2, front=3, left=4
ToolRackType[3] = 0; // 0 for standard slide support / 1 for in-bed or drop support

ToolRackHeight[4] = -10; // Height of the tool rack
ToolRackPosition[4] = 1; //  Rack positions back=1, right=2, front=3, left=4
ToolRackType[4] = 0; // 0 for standard slide support / 1 for in-bed or drop support

// (3) STEPCRAFT Tool Data X,Y and Rack number
// ----------------  EXAMPLE Tool 1 to 12 using Rack 1

ToolX[1] = 100; // Tool X position
ToolY[1] = 100; // Tool Y position
UsedToolRack[1] = 1; // Number of toolrack where the tool is placed

ToolZ[1] = ToolRackHeight[UsedToolRack[1]] ; // Do not change
HolderPosition[1] = ToolRackPosition[UsedToolRack[1]];  // Do not change
HolderType[1] = ToolRackType[UsedToolRack[1]] ;  // Do not change

ToolX[2] = 100; // Tool X position
ToolY[2] = 100; // Tool Y position
UsedToolRack[2] = 1; // Number of toolrack where the tool is placed

ToolZ[2] = ToolRackHeight[UsedToolRack[2]] ; // Do not change
HolderPosition[2] = ToolRackPosition[UsedToolRack[2]];  // Do not change
HolderType[2] = ToolRackType[UsedToolRack[2]] ;  // Do not change

ToolX[3] = 100; // Tool X position
ToolY[3] = 100; // Tool Y position
UsedToolRack[3] = 1; // Number of toolrack where the tool is placed

ToolZ[3] = ToolRackHeight[UsedToolRack[3]] ; // Do not change
HolderPosition[3] = ToolRackPosition[UsedToolRack[3]];  // Do not change
HolderType[3] = ToolRackType[UsedToolRack[3]] ;  // Do not change

ToolX[4] = 100; // Tool X position
ToolY[4] = 100; // Tool Y position
UsedToolRack[4] = 1; // Number of toolrack where the tool is placed

ToolZ[4] = ToolRackHeight[UsedToolRack[4]] ; // Do not change
HolderPosition[4] = ToolRackPosition[UsedToolRack[4]];  // Do not change
HolderType[4] = ToolRackType[UsedToolRack[4]] ;  // Do not change

ToolX[5] = 100; // Tool X position
ToolY[5] = 100; // Tool Y position
UsedToolRack[5] = 1; // Number of toolrack where the tool is placed

ToolZ[5] = ToolRackHeight[UsedToolRack[5]] ; // Do not change
HolderPosition[5] = ToolRackPosition[UsedToolRack[5]];  // Do not change
HolderType[5] = ToolRackType[UsedToolRack[5]] ;  // Do not change

ToolX[6] = 100; // Tool X position
ToolY[6] = 100; // Tool Y position
UsedToolRack[6] = 1; // Number of toolrack where the tool is placed

ToolZ[6] = ToolRackHeight[UsedToolRack[6]] ; // Do not change
HolderPosition[6] = ToolRackPosition[UsedToolRack[6]];  // Do not change
HolderType[6] = ToolRackType[UsedToolRack[6]] ;  // Do not change

ToolX[7] = 100; // Tool X position
ToolY[7] = 100; // Tool Y position
UsedToolRack[7] = 1; // Number of toolrack where the tool is placed

ToolZ[7] = ToolRackHeight[UsedToolRack[7]] ; // Do not change
HolderPosition[7] = ToolRackPosition[UsedToolRack[7]];  // Do not change
HolderType[7] = ToolRackType[UsedToolRack[7]] ;  // Do not change

ToolX[8] = 100; // Tool X position
ToolY[8] = 100; // Tool Y position
UsedToolRack[8] = 1; // Number of toolrack where the tool is placed

ToolZ[8] = ToolRackHeight[UsedToolRack[8]] ; // Do not change
HolderPosition[8] = ToolRackPosition[UsedToolRack[8]];  // Do not change
HolderType[8] = ToolRackType[UsedToolRack[8]] ;  // Do not change

ToolX[9] = 100; // Tool X position
ToolY[9] = 100; // Tool Y position
UsedToolRack[9] = 1; // Number of toolrack where the tool is placed

ToolZ[9] = ToolRackHeight[UsedToolRack[9]] ; // Do not change
HolderPosition[9] = ToolRackPosition[UsedToolRack[9]];  // Do not change
HolderType[9] = ToolRackType[UsedToolRack[9]] ;  // Do not change

ToolX[10] = 100; // Tool X position
ToolY[10] = 100; // Tool Y position
UsedToolRack[10] = 1; // Number of toolrack where the tool is placed

ToolZ[10] = ToolRackHeight[UsedToolRack[10]] ; // Do not change
HolderPosition[10] = ToolRackPosition[UsedToolRack[10]];  // Do not change
HolderType[10] = ToolRackType[UsedToolRack[10]] ;  // Do not change

ToolX[11] = 100; // Tool X position
ToolY[11] = 100; // Tool Y position
UsedToolRack[11] = 1; // Number of toolrack where the tool is placed

ToolZ[11] = ToolRackHeight[UsedToolRack[11]] ; // Do not change
HolderPosition[11] = ToolRackPosition[UsedToolRack[11]];  // Do not change
HolderType[11] = ToolRackType[UsedToolRack[11]] ;  // Do not change

ToolX[12] = 100; // Tool X position
ToolY[12] = 100; // Tool Y position
UsedToolRack[12] = 1; // Number of toolrack where the tool is placed

ToolZ[12] = ToolRackHeight[UsedToolRack[12]] ; // Do not change
HolderPosition[12] = ToolRackPosition[UsedToolRack[12]];  // Do not change
HolderType[12] = ToolRackType[UsedToolRack[12]] ;  // Do not change

// ---------------- END VALUES TO ADJUST ----------------
// ---------------- DO NOT CHANGE FROM THIS POINT ----------------

// (3) STEPCRAFT  parameters for tool change
int Newtool = exec.Getnewtool();
int Currenttool = exec.Getcurrenttool();
// STEPCRAFT max. number of tools possible
if(Newtool <-1 || Newtool >30) // Tool number is out of range, so we need to stop here...
return;
if(Newtool == Currenttool) // Same tool was selected, so do nothing, stop here...
return; 

// Verify Chuck
if(Currenttool!=0){
if(exec.GetLED(14)){
  // STEPCRAFT close chuck if chuck is open
  MessageBox.Show("ATC open, set to tool #" + Currenttool + " but no tool on chuck. NOTICE: This will reset the ATC and set tool to 0"); // STEPCRAFT safety question
  if(!exec.Ismacrostopped()){
  exec.Clroutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
  exec.Wait(100); // Wait one 1000msec
  exec.Setcurrenttool(0);
  MessageBox.Show("ATC is Reset, Please run the macro again");
  exec.Stop();
  return;
}
}
}
// Tool zero, put the tool on rack...
if (Newtool == 0){ 
DialogResult result;
result = MessageBox.Show("Are you sure you want to put back the tool on the rack?", "Important!!!" , MessageBoxButtons.OKCancel);
if (result == System.Windows.Forms.DialogResult.Cancel)
{
Console.Beep();
exec.AddStatusmessage("Tool change was interrupted by user!");
exec.Stop();
return;
}
if (result == System.Windows.Forms.DialogResult.OK){
 exec.Stopspin();
 exec.AddStatusmessage("Waiting for Spindle to Stop");
 exec.Wait(WaitSpin); // Wait one 1000msec
 exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
 while(exec.IsMoving()){}
// Rack Movement
if(HolderPosition[Currenttool]==1){
if(HolderType[Currenttool]==0){
if(Yoriginalpos > (ToolY[Currenttool]-Ytooloffset)){
exec.Code("G00 G53 Y" + (ToolY[Currenttool]-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool]-Ytooloffset));
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Yoriginalpos > (ToolY[Currenttool]-Ytooloffset)){
exec.Code("G00 G53 Y" + (ToolY[Currenttool] - Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool]-Ytooloffset));
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 Y " + ToolY[Currenttool]); // Move axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion)+Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion)));
  while(exec.IsMoving()){}
}
}
if(HolderPosition[Currenttool]==2){
if(HolderType[Currenttool]==0){
if(Xoriginalpos > (ToolX[Currenttool]-Xtooloffset)){
exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Xoriginalpos > (ToolX[Currenttool]-Xtooloffset)){
exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool]); // Move axis to tool holder position
  while(exec.IsMoving()){}
 exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion)+Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion)));
  while(exec.IsMoving()){}
}
}
if(HolderPosition[Currenttool]==3){
if(HolderType[Currenttool]==0){
if(Yoriginalpos < (ToolY[Currenttool]+Ytooloffset)){
exec.Code("G00 G53 Y" + (ToolY[Currenttool] +Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool] +Ytooloffset));
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Yoriginalpos < (ToolY[Currenttool] + Ytooloffset)){
exec.Code("G00 G53 Y" + (ToolY[Currenttool] + Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool]+Ytooloffset));
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 Y " + ToolY[Currenttool]); // Move axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion)+Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion)));
  while(exec.IsMoving()){}
}
}
if(HolderPosition[Currenttool]==4){
if(HolderType[Currenttool]==0){
if(Xoriginalpos < (ToolX[Currenttool] + Xtooloffset)){
exec.Code("G00 G53 X" + (ToolX[Currenttool] + Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + (ToolX[Currenttool] + Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Xoriginalpos < (ToolX[Currenttool] + Xtooloffset)){
exec.Code("G00 G53 X" + (ToolX[Currenttool] + Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + (ToolX[Currenttool] + Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){}
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool]); // Move axis to tool holder position
  while(exec.IsMoving()){}
 exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion)+Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion)));
  while(exec.IsMoving()){}
}
}
if(!exec.Ismacrostopped()){
exec.Setoutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
exec.Wait(WaitRelease);
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion) + ATCsafepickup));
while(exec.IsMoving()){}
exec.Wait(100);
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
while(exec.IsMoving()){}
}
// Move back to start point
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Stop();
return;
}
}
// No Tool on chuck
if(Currenttool==0){
 // Stop spindle if running and Move Z up
 MessageBox.Show("No tool in chuck. Correct?");
 exec.Stopspin();
 exec.AddStatusmessage("Waiting for Spindle to Stop");
 exec.Wait(WaitSpin); 
 exec.Setoutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
 exec.Wait(100);
 exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
 while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Wait(100);
// Rack Movement
if(HolderPosition[Newtool]==1){
if(HolderType[Newtool]==0){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Y" + (ToolY[Newtool] -Ytooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos > ((ToolY[Newtool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos > ((ToolY[Newtool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==2){
if(HolderType[Newtool]==0){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos > ((ToolX[Newtool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos > ((ToolX[Newtool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==3){
if(HolderType[Newtool]==0){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Y" + (ToolY[Newtool] +Ytooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos < ((ToolY[Newtool])+Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos < ((ToolY[Newtool]) + Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool]) + Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 Y" + ((ToolY[Newtool]) + Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==4){
if(HolderType[Newtool]==0){	
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] +Xtooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos < ((ToolX[Newtool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){	
//  Safe Move to new tool position on XY plane
exec.Code("G00 G53 Y" + ToolY[Newtool] + " X" + ToolX[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
exec.Wait(100);
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos < ((ToolX[Newtool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}

if(exec.Ismacrostopped()) // STEPCRAFT interruption
{
  exec.StopWithDeccel();
Console.Beep();
exec.AddStatusmessage("Tool change was interrupted by user!");
  return;
}
}
}
// Toolchange
if(Currenttool!=0){
 // Stop spindle if running and Move Z up
 exec.Stopspin();
 exec.AddStatusmessage("Waiting for Spindle to Stop");
 exec.Wait(WaitSpin); // Wait one 1000msec
 exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
 while(exec.IsMoving()){}
// Rack Movement
if(HolderPosition[Currenttool]==1){
if(HolderType[Currenttool]==0){
if(Yoriginalpos > ((ToolY[Currenttool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Currenttool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool] -Ytooloffset));
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Yoriginalpos > ((ToolY[Currenttool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Currenttool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool]-Ytooloffset));
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z" + (ToolZ[Currenttool] - ATCVersion));
  while(exec.IsMoving()){}
}
}
if(HolderPosition[Currenttool]==2){
if(HolderType[Currenttool]==0){
if(Xoriginalpos > ((ToolX[Currenttool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Currenttool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Xoriginalpos > ((ToolX[Currenttool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Currenttool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + (ToolX[Currenttool]-Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z" + (ToolZ[Currenttool] - ATCVersion));
  while(exec.IsMoving()){}
}
}	
if(HolderPosition[Currenttool]==3){
if(HolderType[Currenttool]==0){
if(Yoriginalpos < ((ToolY[Currenttool])+Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Currenttool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool] +Ytooloffset));
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Yoriginalpos < ((ToolY[Currenttool])+Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Currenttool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + ToolX[Currenttool]);
while(exec.IsMoving()){}
}
else {
  exec.Code("G00 G53 X" + ToolX[Currenttool] + " Y" + (ToolY[Currenttool]+Ytooloffset));
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z" + (ToolZ[Currenttool] - ATCVersion));
  while(exec.IsMoving()){}
}
}
if(HolderPosition[Currenttool]==4){
if(HolderType[Currenttool]==0){
if(Xoriginalpos < ((ToolX[Currenttool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Currenttool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + (ToolX[Currenttool] - Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 Z"+ (ToolZ[Currenttool] - ATCVersion)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
}
if(HolderType[Currenttool]==1){
if(Xoriginalpos < ((ToolX[Currenttool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Currenttool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + ToolY[Currenttool]);
while(exec.IsMoving()){}
}
else {	
  exec.Code("G00 G53 X" + (ToolX[Currenttool]+Xtooloffset) + " Y" + ToolY[Currenttool]);
  while(exec.IsMoving()){} 
}
  // Drop current tool
  exec.Code("G00 G53 X " + ToolX[Currenttool] + " Y " + ToolY[Currenttool]); // Move Y axis to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // Move Z axis down to tool holder position
  while(exec.IsMoving()){}
  exec.Code("G01 F" + Feedrate + "  G53 Z" + (ToolZ[Currenttool] - ATCVersion));
  while(exec.IsMoving()){}
}
}

if(!exec.Ismacrostopped()){
  exec.Setoutpin(Chuckopenport, Chuckopenpin); // Open the chuck with pneumatic valve
  exec.Wait(WaitRelease);
  exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Currenttool] - ATCVersion) + ATCsafepickup));
  exec.Wait(100);
}
  exec.Code("G01 F" + Feedrate + "  G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // STEPCRAFT Move Z up for tool change
  while(exec.IsMoving()){}
if((ToolZ[Newtool] - ATCVersion) > (ToolZ[Currenttool] - ATCVersion)){
  exec.Code("G00 G53 Z"+ ((ToolZ[Newtool] - ATCVersion) + Ztooloffset)); // STEPCRAFT Move Z up for tool change
  while(exec.IsMoving()){}
}
if((ToolZ[Currenttool] - ATCVersion) >= (ToolZ[Newtool] - ATCVersion)){
  exec.Code("G00 G53 Z"+ ((ToolZ[Currenttool] - ATCVersion) + Ztooloffset)); // STEPCRAFT Move Z up for tool change
  while(exec.IsMoving()){}
}
//  Move to new tool position on XY plane
exec.Code("G00 G53 X" + ToolX[Newtool] + " Y" + ToolY[Newtool]);
while(exec.IsMoving()){}
// Pick new tool
exec.Code("G00 G53 Z"+((ToolZ[Newtool] - ATCVersion)+Ztooloffset)); // Move Z axis down Fast
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)+ATCsafepickup)); // Move Z axis down to tool holder position
while(exec.IsMoving()){}
if(!exec.Ismacrostopped()){
exec.Clroutpin(Chuckopenport, Chuckopenpin); // Close the chuck with pneumatic valve
exec.Code("G01 F" + Feedrate + "  G53 Z"+((ToolZ[Newtool] - ATCVersion)));
while(exec.IsMoving()){}
}
if(!exec.Ismacrostopped()) // If tool change was not interrupted with a stop only then validate new tool number
{
  exec.Setcurrenttool(Newtool); //Set the current tool -> the new tool
  exec.Code("G43 H"+Newtool); // Load new tool offset
}
// Rack Movement
if(HolderPosition[Newtool]==1){
if(HolderType[Newtool]==0){
exec.Code("G01 F" + Feedrate + "  G53 Y" + (ToolY[Newtool] -Ytooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos > ((ToolY[Newtool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
exec.Code("G01 F" + Feedrate + " G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos > ((ToolY[Newtool])-Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 Y" + ((ToolY[Newtool])-Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==2){
if(HolderType[Newtool]==0){
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos > ((ToolX[Newtool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move X axis to tool holder offset position
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
exec.Code("G01 F" + Feedrate + " G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos > ((ToolX[Newtool])-Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + ((ToolX[Newtool])-Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move X axis to tool holder offset position
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==3){
if(HolderType[Newtool]==0){
exec.Code("G01 F" + Feedrate + "  G53 Y" + (ToolY[Newtool] +Ytooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos < ((ToolY[Newtool])+Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
exec.Code("G01 F" + Feedrate + " G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Yoriginalpos < ((ToolY[Newtool])+Ytooloffset)){
exec.Code("G00 G53 Y" + ((ToolY[Newtool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 Y" + ((ToolY[Newtool])+Ytooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos + " Y" + Yoriginalpos);
while(exec.IsMoving()){}
}
}
}
if(HolderPosition[Newtool]==4){
if(HolderType[Newtool]==0){
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] +Xtooloffset)); // Move Y axis to tool holder offset position
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos < ((ToolX[Newtool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move X axis to tool holder offset position
while(exec.IsMoving()){}
}
}
if(HolderType[Newtool]==1){
exec.Code("G01 F" + Feedrate + " G53 Z"+((ToolZ[Newtool] - ATCVersion) + Ztooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Z"+ SafeZ); // Move Z up
while(exec.IsMoving()){}
// Safe Move back to start point
if(Xoriginalpos < ((ToolX[Newtool])+Xtooloffset)){
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G00 G53 Y" + Yoriginalpos);
while(exec.IsMoving()){}
exec.Code("G00 G53 X" + Xoriginalpos);
while(exec.IsMoving()){}
}
else {
exec.Code("G00 G53 X" + ((ToolX[Newtool])+Xtooloffset));
while(exec.IsMoving()){}
exec.Code("G01 F" + Feedrate + "  G53 X" + (ToolX[Newtool] -Xtooloffset)); // Move X axis to tool holder offset position
while(exec.IsMoving()){}
}
}
}

if(exec.Ismacrostopped()) // STEPCRAFT interruption
{
  exec.StopWithDeccel();
  Console.Beep();
exec.AddStatusmessage("Tool change was interrupted by user!");
  return;
}
}
if(exec.Ismacrostopped()) // STEPCRAFT interruption
{
  exec.StopWithDeccel();
  Console.Beep();
exec.AddStatusmessage("Tool change was interrupted by user!");
  return;
}
}